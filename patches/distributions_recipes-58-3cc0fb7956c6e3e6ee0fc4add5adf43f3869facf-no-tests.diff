diff --git a/core/lib/Drupal/Core/Recipe/InvalidConfigException.php b/core/lib/Drupal/Core/Recipe/InvalidConfigException.php
new file mode 100644
index 0000000000..c3c4be2369
--- /dev/null
+++ b/core/lib/Drupal/Core/Recipe/InvalidConfigException.php
@@ -0,0 +1,30 @@
+<?php
+
+namespace Drupal\Core\Recipe;
+
+use Drupal\Core\Config\Schema\Mapping;
+use Symfony\Component\Validator\ConstraintViolationList;
+
+final class InvalidConfigException extends \RuntimeException {
+
+  public function __construct(
+    public readonly ConstraintViolationList $violations,
+    public readonly Mapping $data,
+    string $message = '',
+    int $code = 0,
+    ?\Throwable $previous = NULL,
+  ) {
+    parent::__construct($message ?: (string) $violations, $code, $previous);
+  }
+
+  public function rethrow(): never {
+    throw new static(
+      $this->violations,
+      $this->data,
+      $this->getMessage(),
+      $this->getCode(),
+      $this,
+    );
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Recipe/RecipeConfigInstaller.php b/core/lib/Drupal/Core/Recipe/RecipeConfigInstaller.php
index 70d6308d22..e18d7527b3 100644
--- a/core/lib/Drupal/Core/Recipe/RecipeConfigInstaller.php
+++ b/core/lib/Drupal/Core/Recipe/RecipeConfigInstaller.php
@@ -23,7 +23,6 @@ public function installRecipeConfig(ConfigConfigurator $recipe_config): void {
     // Build the list of possible configuration to create.
     $list = $storage->listAll();
 
-    $enabled_extensions = $this->getEnabledExtensions();
     $existing_config = $this->getActiveStorages()->listAll();
 
     // Filter the list of configuration to only include configuration that
@@ -39,8 +38,6 @@ public function installRecipeConfig(ConfigConfigurator $recipe_config): void {
       return;
     }
 
-    $all_config = array_merge($existing_config, $list);
-    $all_config = array_combine($all_config, $all_config);
     $config_to_create = $storage->readMultiple($list);
 
     // Sort $config_to_create in the order of the least dependent first.
@@ -48,16 +45,21 @@ public function installRecipeConfig(ConfigConfigurator $recipe_config): void {
     $dependency_manager->setData($config_to_create);
     $config_to_create = array_merge(array_flip($dependency_manager->sortAll()), $config_to_create);
 
-    foreach ($config_to_create as $config_name => $data) {
-      if (!$this->validateDependencies($config_name, $data, $enabled_extensions, $all_config)) {
-        throw new RecipeUnmetDependenciesException($config_name, sprintf("The configuration '%s' has unmet dependencies", $config_name));
-      }
-    }
-
     // Create the optional configuration if there is any left after filtering.
     if (!empty($config_to_create)) {
       $this->createConfiguration(StorageInterface::DEFAULT_COLLECTION, $config_to_create);
     }
+
+    foreach ($config_to_create as $name => $data) {
+      // All config objects are mappings.
+      /** @var \Drupal\Core\Config\Schema\Mapping $typed_config */
+      $typed_config = $this->typedConfig->createFromNameAndData($name, $data);
+      /** @var \Symfony\Component\Validator\ConstraintViolationList $violations */
+      $violations = $typed_config->validate();
+      if (count($violations) > 0) {
+        throw new InvalidConfigException($violations, $typed_config);
+      }
+    }
   }
 
 }
diff --git a/core/lib/Drupal/Core/Recipe/RecipeRunner.php b/core/lib/Drupal/Core/Recipe/RecipeRunner.php
index 5670c1f871..c5bf0d6322 100644
--- a/core/lib/Drupal/Core/Recipe/RecipeRunner.php
+++ b/core/lib/Drupal/Core/Recipe/RecipeRunner.php
@@ -2,8 +2,10 @@
 
 namespace Drupal\Core\Recipe;
 
+use Drupal\Core\Config\ConfigImporter;
 use Drupal\Core\Config\FileStorage;
 use Drupal\Core\Config\InstallStorage;
+use Drupal\Core\Config\StorageComparer;
 use Drupal\Core\Config\StorageInterface;
 
 /**
@@ -23,9 +25,37 @@ final class RecipeRunner {
    *   The recipe to apply.
    */
   public static function processRecipe(Recipe $recipe): void {
-    static::processRecipes($recipe->recipes);
-    static::processInstall($recipe->install, $recipe->config->getConfigStorage());
-    static::processConfiguration($recipe->config);
+    /** @var \Drupal\Core\Config\Checkpoint\CheckpointStorageInterface $checkpoint_storage */
+    $checkpoint_storage = \Drupal::service('config.storage.checkpoint');
+    $checkpoint = $checkpoint_storage->checkpoint('Backup');
+
+    try {
+      static::processRecipes($recipe->recipes);
+      static::processInstall($recipe->install, $recipe->config->getConfigStorage());
+      static::processConfiguration($recipe->config);
+    }
+    catch (InvalidConfigException $e) {
+      $checkpoint_storage->setReadFromCheckpoint($checkpoint);
+
+      $comparer = new StorageComparer($checkpoint_storage, \Drupal::service('config.storage'));
+      $comparer->reset();
+
+      $config_importer = new ConfigImporter(
+        $comparer,
+        \Drupal::service('event_dispatcher'),
+        \Drupal::service('config.manager'),
+        \Drupal::lock(),
+        \Drupal::service('config.typed'),
+        \Drupal::moduleHandler(),
+        \Drupal::service('module_installer'),
+        \Drupal::service('theme_handler'),
+        \Drupal::translation(),
+        \Drupal::service('extension.list.module'),
+        \Drupal::service('extension.list.theme'),
+      );
+      $config_importer->import();
+      $e->rethrow();
+    }
     static::processContent($recipe->content);
   }
 
